{
	"name": "df_UpdateProduct",
	"properties": {
		"folder": {
			"name": "Chapter7"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ASQL_dboSalesLoad",
						"type": "DatasetReference"
					},
					"name": "Sales"
				},
				{
					"dataset": {
						"referenceName": "dboProduct",
						"type": "DatasetReference"
					},
					"name": "dboProduct"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dboProduct",
						"type": "DatasetReference"
					},
					"name": "dboProductSink"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "removeDuplicatesProduct"
				},
				{
					"name": "newProductsOnly"
				}
			],
			"scriptLines": [
				"source(output(",
				"          RowID as integer,",
				"          Retailer as string,",
				"          SalesMonth as date,",
				"          Product as string,",
				"          ManufacturerProductCode as string,",
				"          SalesValueUSD as decimal(18,2),",
				"          UnitsSold as integer,",
				"          SourceFileName as string,",
				"          RunSeqNo as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Sales",
				"source(output(",
				"          Product as string,",
				"          ProductName as string,",
				"          WeightInOunces as decimal(19,2),",
				"          WeightInGrams as decimal(19,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dboProduct",
				"Sales derive(ProductName = trim(left(Product,length(Product)-length(:weightstring))),",
				"          WeightInOunces = toFloat(replace(:weightstring, :weightUnit, '')) / iif(:weightUnit=='g', 28.3495, 1.0),",
				"          WeightInGrams = toFloat(replace(:weightstring, :weightUnit, '')) * iif(:weightUnit=='oz', 28.3495, 1.0),",
				"          weightstring := right(Product,locate(' ',reverse(Product))-1),",
				"          weightUnit := iif(endsWith(Product, 'oz'), 'oz', 'g')) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(Product),",
				"     ProductName = first(ProductName),",
				"          each(match(startsWith(name, 'Weight')), $$ = first($$))) ~> removeDuplicatesProduct",
				"removeDuplicatesProduct, dboProduct exists(removeDuplicatesProduct@Product == dboProduct@Product,",
				"     negate:true,",
				"     broadcast: 'auto')~> newProductsOnly",
				"newProductsOnly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Product as string,",
				"          ProductName as string,",
				"          WeightInOunces as decimal(19,2),",
				"          WeightInGrams as decimal(19,2)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Product,",
				"          ProductName,",
				"          WeightInOunces,",
				"          WeightInGrams",
				"     )) ~> dboProductSink"
			]
		}
	}
}